# Example directory structure: ディレクトリ構成例
#
# root/
#   |
#   + main.cpp (your code)
#   |
#   + Makefile (your makefile): This file
#   |
#   + sstd/
#       |
#       + sstd.hpp (head file that you need to include)
#       |
#       + Makefile (Makefile that you need to '$ make')
#       |
#       + make_temp/
#       |   |
#       |   + src/
#       |      |
#       |      + *.d
#       |      |
#       |      + *.o (object files that you need to link "./sstd/make_temp/*.o")
#       |
#       + src/
#           |
#           + *.cpp
#           |
#           + *.hpp
#           |
#           + *.h

# .o: Objects file
# .d: Depends file

#============================================================
# Please set each item: 各項目を設定してください

# Source files
SRCS = ./main.cpp

# Name of generate file: 生成ファイル名
TARGET = exe

# remove files
RMs  = *.stackdump tmp tmpDir
RMs += test_file_c.png
RMs += test_file_c2f.png
RMs += ./sin.png                     # test file generated by test/c2py
RMs += ./sin_cos.png                 # test file generated by test/c2py
RMs += ./test_reCombined.png         # test file generated by test/c2py
RMs += ./test__writeAll_bin_char.png # test file generated by test/strEdit
RMs += ./test__writeAll_bin_str.png  # test file generated by test/strEdit
RMs += ./test_fopen.txt
RMs += ./test_mkdir

# Options: コンパイルオプション
CFLAGS  = -L./sstd/lib -I./sstd/include -lsstd # sstd
CFLAGS += -L./googletest-master/build/lib -I./googletest-master/googletest/include -lgtest -pthread # google test
CFLAGS += -std=c++11 # CFLAGS += -std=gnu++0x
CFLAGS += -Wall
CFLAGS += -O3

#============================================================

TEMP_DIR = tmpMake

BACKUP_DIR   = ./backup
ALL_FILES    = $(wildcard ./*)
TMP_DIRS     = $(wildcard ./tmp_*)
LIBS_DIRS    = ./googletest-master
BACKUP_FILES = $(filter-out ./$(TARGET) $(TMP_DIRS) $(BACKUP_DIR) $(LIBS_DIRS), $(ALL_FILES))
TIME_STAMP   = `date +%Y_%m%d_%H%M`

# test files
HEADS_t      = $(wildcard ./*.py      )
HEADS_t     += $(wildcard ./test/*.py )
HEADS_t     += $(wildcard ./test/*.h  )
HEADS_t     += $(wildcard ./test/*.hpp)

MULTI_DEF_TEST_FILE = check_multiple_definition
TEST_MULTI_DEF = $(TEMP_DIR)/$(MULTI_DEF_TEST_FILE).o

# when you need to check the change of files in lib, you need to change file name to a not-existing name like "FORCE_XXX".
LIB_SSTD       = FORCE_SSTD
#LIB_GOOGLETEST = FORCE_GOOGLETEST
#LIB_SSTD       = ./sstd/lib/libsstd.a
LIB_GOOGLETEST = ./googletest-master/build/lib/libgtest.a


$(TARGET): $(LIB_SSTD) $(LIB_GOOGLETEST) $(TEST_MULTI_DEF) $(SRCS)
	@echo "\n============================================================\n"
	@echo "SRCS: \n$(SRCS)\n"
	@echo "CFLAGS: \n$(CFLAGS)"
	@echo "\n============================================================\n"
	$(CXX) -o $(TARGET) $(SRCS) $(CFLAGS) $(TEST_MULTI_DEF)
	@echo ""


$(LIB_SSTD):
	@(cd ./sstd; make -j)


$(LIB_GOOGLETEST):
	@echo ""
	@tar -zxvf googletest-release-1.12.1.tar.gz
	@mv googletest-release-1.12.1 googletest-master
	@(cd ./googletest-master; mkdir -p build; cd build; cmake ..; make)
#	@unzip -n googletest-master.zip
#	@(cd ./googletest-master; mkdir -p build; cd build; cmake ..; make)


$(TEST_MULTI_DEF):
	@mkdir -p $(TEMP_DIR)
	$(CXX) ./test/$(MULTI_DEF_TEST_FILE).cpp -c $(CFLAGS) -o $(TEST_MULTI_DEF)


.PHONY: all
all:
	@(make clean)
	@(make -j)


patch            := *.stackdump
patch_txt_exists := $(shell find -name $(patch))
.PHONY: clean
clean:
	-rm -rf $(TARGET)
	@(cd ./sstd; make clean)
	-rm -rf googletest-master
	@(find . -name "__pycache__" -type d | xargs rm -rf)
	$(if $(patch_txt_exists) ,$(rm *.stackdump))
	-rm -rf $(RMs)
	-rm -rf test__write_bin_char.png
	-rm -rf test__write_bin_str.png
	-rm -rf $(TEMP_DIR)


.PHONY: steps
steps: $(SRCS) $(HEADS_t)
	@(cd ./sstd; make steps)
	@echo ""
	@echo "$^" | xargs wc -l


.PHONY: zip
zip:
	@mkdir -p $(BACKUP_DIR)
	zip -r $(BACKUP_DIR)/${TIME_STAMP}$(m).zip $(BACKUP_FILES)
.PHONY: backup
backup:
	@(make clean)
	@(make zip)
	@(make)
# when you need comments for backup, just type
# $ make backup m=_comment_will_be_inserted_after_the_date


